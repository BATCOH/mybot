# -*- coding: utf-8 -*-
import random
import re

from telegram.ext import Updater
from telegram.ext import Filters
from telegram.ext import MessageHandler
from telegram.ext import CommandHandler
from telegram.ext import CallbackQueryHandler
import telegram as telega
import sqlite3 as sql
import datetime
import threading
import time
from enum import Enum


class KeyboardType(Enum):
    NONE = -1
    DEFAULT = 0
    TOP = 1
    STATS = 2


class StatType(Enum):
    ALL = 1
    ATTACK = 2
    HP = 3
    ACCURACY = 4
    AGILITY = 5
    ORATORY = 6
    RAIDS = 7


class PlayerStat:
    def __init__(self, cur, id=None):
        self.time = datetime.datetime.now()
        self.hp = 0
        self.attack = 0
        self.deff = 0
        self.power = 0
        self.accuracy = 0
        self.oratory = 0
        self.agility = 0
        self.raids = 0
        self.id = id
        try:
            cur.execute("CREATE TABLE IF NOT EXISTS userstats"
                        "(id INTEGER PRIMARY KEY,"
                        "time TEXT, hp INTEGER, attack  INTEGER, deff INTEGER, power INTEGER, accuracy INTEGER, "
                        "oratory INTEGER, agility INTEGER, raids INTEGER)")

            if self.id:
                self.get(cur)
        except sql.Error as e:
            print("Sql error occurred:", e.args[0])

    def put(self, cur):
        try:
            cur.execute("INSERT INTO userstats(time, hp, attack, deff, power, accuracy, oratory, agility, raids)"
                        " VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?)",
                        (self.time, self.hp, self.attack, self.deff, self.power, self.accuracy, self.oratory,
                         self.agility, self.raids))
            self.id = cur.lastrowid
        except sql.Error as e:
            print("Sql error occurred:", e.args[0])

    def get(self, cur):
        try:
            cur.execute("SELECT * FROM userstats WHERE id=?", (self.id,))
            self.time, self.hp, self.attack, self.deff, self.power, self.accuracy, self.oratory, self.agility, \
            self.raids = cur.fetchone()[1:10]
        except sql.Error as e:
            print("Sql error occurred:", e.args[0])
            return -1

    def update_stats(self, cur):
        try:
            cur.execute("""UPDATE userstats SET
                        time = ? , hp = ? , attack = ? , deff = ? , power = ? , accuracy = ? , oratory = ? ,
                        agility = ? WHERE id=?""",
                        (self.time, self.hp, self.attack, self.deff, self.power, self.accuracy,
                         self.oratory, self.agility, self.id))
        except sql.Error as e:
            print("Sql error occurred:", e.args[0])
            return -1

    def update_raids(self, cur, id=None, time=None):
        try:
            cur.execute("""UPDATE userstats SET raids = ?  WHERE id=?""", (self.raids, self.id))
            if time is not None:
                cur.execute("INSERT INTO raids(id, time) VALUES(?, ?)", (id, time))
        except sql.Error as e:
            print("Sql error occurred:", e.args[0])
            return -1

    def sum(self):
        return self.hp + self.attack + self.agility + self.accuracy + self.oratory

    def copy_stats(self, ps):
        self.time, self.hp, self.attack, self.deff, self.power, self.oratory, self.agility, self.accuracy, self.raids = \
            ps.time, ps.hp, ps.attack, ps.deff, ps.power, ps.oratory, ps.agility, ps.accuracy, ps.raids


class Player:
    def __init__(self, cur, setings=(None, -1, "", "", "", [None, None, None, None, None])):
        self.id, self.chatid, self.username, self.nic, self.squad, sids = setings
        if self.squad is None:
            self.squad = ""
        if self.nic is None:
            self.nic = ""
        if self.username is None:
            self.username = ""
        self.update_text(cur)
        self.stats = [PlayerStat(cur, i) if i is not None else None for i in sids]
        self.keyboard = KeyboardType.DEFAULT

    def get_stats(self, n):
        return self.stats[n]

    def set_stats(self, cur, ps: PlayerStat, n):
        if self.stats[n] is None:
            self.stats[n] = PlayerStat(cur)
            self.stats[n].copy_stats(ps)
            self.stats[n].put(cur)
            self.update_id(cur, n)
            return self.stats[n]
        else:
            self.stats[n].copy_stats(ps)
            self.stats[n].update_stats(cur)
            self.stats[n].update_raids(cur)
            self.update_id(cur, n)
            return self.stats[n]

    def update_id(self, cur, n):
        try:
            if n == 0:
                cur.execute("UPDATE users SET id1= ? WHERE id = ?", (self.stats[n].id, self.id))
            elif n == 1:
                cur.execute("UPDATE users SET id2= ? WHERE id = ?", (self.stats[n].id, self.id))
            elif n == 2:
                cur.execute("UPDATE users SET id3= ? WHERE id = ?", (self.stats[n].id, self.id))
            elif n == 3:
                cur.execute("UPDATE users SET lid= ? WHERE id = ?", (self.stats[n].id, self.id))
            elif n == 4:
                cur.execute("UPDATE users SET cid= ? WHERE id = ?", (self.stats[n].id, self.id))
        except sql.Error as e:
            print("Sql error occurred:", e.args[0])

    def update_text(self, cur):
        try:
            cur.execute("UPDATE users SET username = ?, nic = ?, squad = ? WHERE id = ?",
                        (self.username, self.nic, self.squad, self.id))
        except sql.Error as e:
            print("Sql error occurred:", e.args[0])

    def delete(self, cur):
        try:
            cur.execute("DELETE FROM users WHERE id=?", (self.id,))
        except sql.Error as e:
            print("Sql error occurred:", e.args[0])
            return -1
        for st in self.stats:
            if st is not None:
                try:
                    cur.execute("DELETE FROM userstats WHERE id=?", (st.id,))
                except sql.Error as e:
                    print("Sql error occurred:", e.args[0])
                    return -1


class PinOnline:
    def __init__(self, squadids: dict, bot):
        self.bot = bot
        self.squadids = squadids
        self.squabyid = {v[1]: v[0] for v in self.squadids.items()}
        self.users = {}
        self.power = {sq: 0 for sq in squadids.keys()}
        self.names = {sq: set() for sq in squadids.keys()}
        self.messages = {}
        self.connections = {}
        self.copies = {}

    def pin(self, sq, admin_chat):
        if not admin_chat in self.connections.keys():
            self.connect(admin_chat)
        self.update()
        if sq not in self.squadids.keys():
            self.bot.sendMessage(chat_id=admin_chat, text="–ù–µ –∑–Ω–∞—é –æ—Ç—Ä—è–¥–∞ " + sq)
            return
        if self.squadids[sq] in self.messages.keys():
            self.bot.sendMessage(chat_id=admin_chat, text="–ü–∏–Ω —É–∂–µ –≤ –æ—Ç—Ä—è–¥–µ " + sq)
            return
        markup = [[telega.InlineKeyboardButton(text="–ì–æ—Ç–æ–≤ ü§∫", callback_data="online")]]
        text = "#–ø–∏–Ω–æ–Ω–ª–∞–π–Ω –ì–æ—Ç–æ–≤–∏–º—Å—è –∫ —Ä–µ–π–¥—É"
        chat_id = self.squadids[sq]
        id = self.bot.sendMessage(chat_id=chat_id, text=text,
                                  reply_markup=telega.InlineKeyboardMarkup(markup)).message_id
        self.messages[chat_id] = id
        try:
            self.bot.pinChatMessage(chat_id=chat_id, message_id=id)
        except:
            self.bot.sendMessage(chat_id=admin_chat, text=("–ù–µ —Å–º–æ–≥ –∑–∞–ø–∏–Ω–∏—Ç—å –≤ " + sq))
        self.bot.sendMessage(chat_id=admin_chat, text=("–û–ø—Ä–æ—Å –¥–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ " + sq))
        self.update()

    def add(self, player: Player, chat_id):
        if player.id in self.users.keys():
            if chat_id != self.users[player.id]:
                self.delete(player)
            else:
                return False
        self.users[player.id] = chat_id
        ps = player.stats[4]
        sq = self.squabyid[chat_id]
        self.power[sq] += ps.attack + ps.hp + ps.deff + ps.agility + 10
        self.names[sq].add(player.username)
        self.update_chat(chat_id)
        self.update()
        return True

    def delete(self, player: Player):
        if player.id not in self.users.keys():
            return False
        sq = self.squabyid[self.users[player.id]]
        ps = player.stats[4]
        self.power[sq] -= (ps.attack + ps.hp + ps.deff + ps.agility + 10)
        self.names[sq].discard(player.username)
        del (self.users[player.id])
        self.update_chat(self.squadids[sq])
        self.update()
        return True

    def text(self):
        s = "–°–∏–ª—ã –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç:\n"
        for sq in self.power.keys():
            if self.squadids[sq] in self.messages.keys():
                s += sq + ": <b>" + str(self.power[sq]) + "</b> –î–∞–∫–∏-–ø–æ–∏–Ω—Ç–æ–≤ (" + str(len(self.names[sq])) + ")" + str(
                    self.names[sq]) + "\n"
        return s

    def copy_to(self, chat_id):
        text = self.text()
        id = self.bot.sendMessage(chat_id=chat_id, text=text, parse_mode='HTML').message_id
        self.copies[chat_id] = id

    def connect(self, chat_id):
        markup = [[telega.InlineKeyboardButton(text="–ó–∞–∫—Ä—ã—Ç—å –ø–∏–Ω", callback_data="offline")]]
        text = self.text()
        id = self.bot.sendMessage(chat_id=chat_id, text=text,
                                  reply_markup=telega.InlineKeyboardMarkup(markup)).message_id
        self.connections[chat_id] = id

    def update_chat(self, chat_id):
        sq = self.squabyid[chat_id]
        text = "#–ø–∏–Ω–æ–Ω–ª–∞–π–Ω –ì–æ—Ç–æ–≤–∏–º—Å—è –∫ —Ä–µ–π–¥—É:\n–æ–Ω–ª–∞–π–Ω (" + str(len(self.names[sq])) + ")" + str(self.names[sq]) + "\n"
        markup = [[telega.InlineKeyboardButton(text="–ì–æ—Ç–æ–≤ ü§∫", callback_data="online")]]
        try:
            self.bot.editMessageText(chat_id=chat_id, message_id=self.messages[chat_id], text=text,
                                     reply_markup=telega.InlineKeyboardMarkup(markup), parse_mode='HTML')
        except:
            pass

    def update(self):
        markup = [[telega.InlineKeyboardButton(text="–ó–∞–∫—Ä—ã—Ç—å –ø–∏–Ω", callback_data="offline")]]
        for con in self.connections.items():
            try:
                self.bot.editMessageText(chat_id=con[0], message_id=con[1], text=self.text(),
                                         reply_markup=telega.InlineKeyboardMarkup(markup), parse_mode='HTML')
            except:
                pass
        for con in self.copies.items():
            try:
                self.bot.editMessageText(chat_id=con[0], message_id=con[1], text=self.text(), parse_mode='HTML')
            except:
                pass

    def close(self):
        for m in self.messages.items():
            try:
                self.bot.editMessageReplyMarkup(chat_id=m[0], message_id=m[1])
            except:
                pass
        self.update()
        for m in self.connections.items():
            try:
                self.bot.editMessageReplyMarkup(chat_id=m[0], message_id=m[1])
            except:
                pass


class PinOnlineKm:
    def __init__(self, squadids: dict, bot):
        self.bot = bot
        self.mes = ""
        self.squadids = squadids
        self.squabyid = {v[1]: v[0] for v in self.squadids.items()}
        self.users = {}
        self.oderedkm = ['3', '7', '10', '12', '15', '19', '22', '29', '36']
        self.kms = {x: set() for x in self.oderedkm}
        self.kmspw = {x: 0 for x in self.oderedkm}
        self.power = {sq: 0 for sq in squadids.keys()}
        self.names = {sq: set() for sq in squadids.keys()}
        self.messages = {}
        self.connections = {}
        self.copies = {}
        self.usersbyname = {}
        self.chatm = {}

    def pin(self, sq, admin_chat, chatmes=""):
        if not admin_chat in self.connections.keys():
            self.connect(admin_chat)
        self.update()
        if sq not in self.squadids.keys():
            self.bot.sendMessage(chat_id=admin_chat, text="–ù–µ –∑–Ω–∞—é –æ—Ç—Ä—è–¥–∞ " + sq)
            return
        self.chatm[sq] = chatmes
        if self.squadids[sq] in self.messages.keys():
            self.bot.sendMessage(chat_id=admin_chat, text="–ü–∏–Ω —É–∂–µ –≤ –æ—Ç—Ä—è–¥–µ " + sq)
            self.update_chat(self.squadids[sq])
            return
        kms = [x for x in self.oderedkm]
        markup = [[telega.InlineKeyboardButton(text=k + "–∫–º", callback_data="onkm " + k) for k in kms[:3]],
                  [telega.InlineKeyboardButton(text=k + "–∫–º", callback_data="onkm " + k) for k in kms[3:6]],
                  [telega.InlineKeyboardButton(text=k + "–∫–º", callback_data="onkm " + k) for k in kms[6:]]]
        text = "#–ø–∏–Ω–æ–Ω–ª–∞–π–Ω\n" + self.mes + "<b>" + self.chatm[sq] + "</b>"
        chat_id = self.squadids[sq]
        id = self.bot.sendMessage(chat_id=chat_id, text=text,
                                  reply_markup=telega.InlineKeyboardMarkup(markup), parse_mode='HTML').message_id
        self.messages[chat_id] = id
        try:
            self.bot.pinChatMessage(chat_id=chat_id, message_id=id)
        except:
            self.bot.sendMessage(chat_id=admin_chat, text=("–ù–µ —Å–º–æ–≥ –∑–∞–ø–∏–Ω–∏—Ç—å –≤ " + sq))
        self.bot.sendMessage(chat_id=admin_chat, text=("–û–ø—Ä–æ—Å –¥–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ " + sq))
        self.update()

    def add(self, player: Player, chat_id, km):
        if player.id in self.users.keys():
            if (chat_id != self.users[player.id]) and (player.username not in self.kms[km]):
                self.delete(player)
            else:
                return False
        self.users[player.id] = (chat_id, km)
        self.kms[km].add(player.username)
        self.usersbyname[player.username] = player.id
        ps = player.stats[4]
        sq = self.squabyid[chat_id]
        self.power[sq] += ps.attack + ps.hp + ps.deff + ps.agility + 10
        self.kmspw[km] += ps.attack + ps.hp + ps.deff + ps.agility + 10
        self.names[sq].add(player.username)
        self.update_chat(chat_id)
        self.update()
        return True

    def delete(self, player: Player):
        if player.id not in self.users.keys():
            return False
        sq = self.squabyid[self.users[player.id][0]]
        km = self.users[player.id][1]
        ps = player.stats[4]
        self.power[sq] -= (ps.attack + ps.hp + ps.deff + ps.agility + 10)
        self.kmspw[km] -= (ps.attack + ps.hp + ps.deff + ps.agility + 10)
        self.names[sq].discard(player.username)
        self.kms[km].discard(player.username)
        del (self.users[player.id])
        self.update_chat(self.squadids[sq])
        self.update()
        return True

    def text(self):
        s = "<b>–ü–∏–Ω—ã</b>\n"
        for m in self.chatm.items():
            s += " " + m[0] + ": <b>" + m[1] + "</b>\n"
        s += "<b>–°–∏–ª—ã –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç:</b>\n"
        for sq in self.power.keys():
            if self.squadids[sq] in self.messages.keys():
                s += sq + ": <b>" + str(self.power[sq]) + "</b>üï≥ (" + str(len(self.names[sq])) + ") "
                if self.names[sq]:
                    s += "[@" + " @".join(self.names[sq]) + "]\n"
                else:
                    s += "\n"
        s += "<b>–õ–æ–∫–∞—Ü–∏–∏</b>\n"
        for km in self.oderedkm:
            if self.kms[km]:
                s += " <b>" + km + "–∫–º</b> (" + str(len(self.kms[km])) + ") [" + str(
                    self.kmspw[km]) + "] @" + " @".join(self.kms[km]) + "\n"
            else:
                s += " <b>" + km + "–∫–º</b> (0) ---\n"
        return s

    def copy_to(self, chat_id):
        text = self.text()
        id = self.bot.sendMessage(chat_id=chat_id, text=text, parse_mode='HTML').message_id
        self.copies[chat_id] = id

    def connect(self, chat_id):
        markup = [[telega.InlineKeyboardButton(text="–ó–∞–∫—Ä—ã—Ç—å –ø–∏–Ω", callback_data="offkm")]]
        text = self.text()
        id = self.bot.sendMessage(chat_id=chat_id, text=text,
                                  reply_markup=telega.InlineKeyboardMarkup(markup)).message_id
        self.connections[chat_id] = id

    def update_chat(self, chat_id):
        sq = self.squabyid[chat_id]
        text = "#–ø–∏–Ω–æ–Ω–ª–∞–π–Ω\n" + self.mes + "<b>" + self.chatm[sq] + "</b>" + "\n\n–æ–Ω–ª–∞–π–Ω (" + str(
            len(self.names[sq])) + ")\n"
        for km in self.oderedkm:
            l = [u for u in self.kms[km] if self.users[self.usersbyname[u]][0] == chat_id]
            if l != []:
                text += "<b>" + km + "–∫–º</b> (" + str(len(l)) + "): @" + " @".join(l) + "\n"
            else:
                text += "<b>" + km + "–∫–º</b> (0) ---\n"
        kms = [x for x in self.oderedkm]
        markup = [[telega.InlineKeyboardButton(text=k + "–∫–º", callback_data="onkm " + k) for k in kms[:3]],
                  [telega.InlineKeyboardButton(text=k + "–∫–º", callback_data="onkm " + k) for k in kms[3:6]],
                  [telega.InlineKeyboardButton(text=k + "–∫–º", callback_data="onkm " + k) for k in kms[6:]]]
        try:
            self.bot.editMessageText(chat_id=chat_id, message_id=self.messages[chat_id], text=text,
                                     reply_markup=telega.InlineKeyboardMarkup(markup), parse_mode='HTML')
        except:
            pass

    def update(self):
        markup = [[telega.InlineKeyboardButton(text="–ó–∞–∫—Ä—ã—Ç—å –ø–∏–Ω", callback_data="offkm")]]
        text = self.text()
        for con in self.connections.items():
            try:
                self.bot.editMessageText(chat_id=con[0], message_id=con[1], text=text,
                                         reply_markup=telega.InlineKeyboardMarkup(markup), parse_mode='HTML')
            except:
                pass
        for con in self.copies.items():
            try:
                self.bot.editMessageText(chat_id=con[0], message_id=con[1], text=text, parse_mode='HTML')
            except:
                pass

    def close(self):
        for m in self.messages.items():
            try:
                self.bot.editMessageReplyMarkup(chat_id=m[0], message_id=m[1])
            except:
                pass
        self.update()
        for m in self.connections.items():
            try:
                self.bot.editMessageReplyMarkup(chat_id=m[0], message_id=m[1])
            except:
                pass


class Bot:
    def __init__(self, database: str, token: str, bot_name: str):
        conn = None
        self.database = database
        self.bot_name = bot_name
        try:
            conn = sql.connect(database)
        except sql.Error as e:
            print("Sql error occurred:", e.args[0])
        cur = conn.cursor()
        cur.execute("CREATE TABLE IF NOT EXISTS users"
                    "(id INT UNIQUE, chatid INT, username TEXT, nic TEXT, squad TEXT, id1 INT, id2 INT, id3 INT, lid INT, cid INT)")
        cur.execute('CREATE TABLE IF NOT EXISTS squads (name TEXT, short TEXT, chatid INT)')
        cur.execute('CREATE TABLE IF NOT EXISTS masters (id INTEGER, name TEXT)')
        cur.execute('CREATE TABLE IF NOT EXISTS admins (id INTEGER)')
        cur.execute('CREATE TABLE IF NOT EXISTS raids (id INTEGER, time TEXT)')
        cur.execute('CREATE TABLE IF NOT EXISTS blacklist (id INTEGER)')
        cur.execute(
            'CREATE TABLE IF NOT EXISTS settings (id REFERENCES users(id) ON DELETE CASCADE, sex TEXT, keyboard INT, raidnotes INT)')
        cur.execute('CREATE TABLE IF NOT EXISTS state (data TEXT)')  # not The best solution ever but it will do
        cur.execute("SELECT * FROM admins")
        self.admins = set(r[0] for r in cur.fetchall())
        cur.execute("SELECT * FROM blacklist")
        self.blacklist = set(r[0] for r in cur.fetchall())
        cur.execute("SELECT * FROM raids")
        self.raids = set((r[0], r[1]) for r in cur.fetchall())
        self.pinonline = None
        self.pinkm = None
        self.usersbyname = {}
        self.masters = {}
        self.users = {}
        self.squadnames = {}
        self.squadids = {}
        self.kick = {}
        self.viva_six = {}
        self.pinns = []  # (squad, pinn, time) or (squad) to unp #TODO –Ω–∞–ø–∏—Å–∞—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é
        self.keyboards = {}  # TODO –Ω–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        self.keyboards[KeyboardType.DEFAULT] = telega.ReplyKeyboardMarkup([[telega.KeyboardButton("üíΩ –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
                                                                            telega.KeyboardButton("üéñ –¢–æ–ø—ã")],
                                                                            [telega.KeyboardButton("üëª –û –±–æ—Ç–µ"),
                                                                             telega.KeyboardButton("üë®‚Äçüíª –û –∂–∏–∑–Ω–∏")]],
                                                                          resize_keyboard=True)
        self.keyboards[KeyboardType.TOP] = telega.ReplyKeyboardMarkup(
            [[telega.KeyboardButton("üèÖ –†–µ–π—Ç–∏–Ω–≥"), telega.KeyboardButton("‚öîÔ∏è –î–∞–º–∞–≥–µ—Ä—ã"),
              telega.KeyboardButton("‚ù§Ô∏è –¢–∞–Ω–∫–∏")],
             [telega.KeyboardButton("ü§∏üèΩ‚Äç‚ôÇÔ∏è –õ–æ–≤–∫–∞—á–∏"), telega.KeyboardButton("üî´ –°–Ω–∞–π–ø–µ—Ä—ã"),
              telega.KeyboardButton("üó£ –î–∏–ø–ª–æ–º–∞—Ç—ã")], [telega.KeyboardButton("üî™ –†–µ–π–¥–µ—Ä—ã")],
             [telega.KeyboardButton("üìú –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫"), telega.KeyboardButton("üîô –ù–∞–∑–∞–¥")]], resize_keyboard=True)
        self.keyboards[KeyboardType.STATS] = telega.ReplyKeyboardMarkup(
            [[telega.KeyboardButton("üì± –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), telega.KeyboardButton("üîù –ü—Ä–∏—Ä–æ—Å—Ç")],
             [telega.KeyboardButton("üì≤ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å"), telega.KeyboardButton("üîô –ù–∞–∑–∞–¥")]], resize_keyboard=True)
        self.state = KeyboardType.DEFAULT
        cur.execute("SELECT * FROM users")
        for r in cur.fetchall():
            # print(r)–¥–∞ –ø–æ—á–∏—Ç–∞–π –æ–ø–∏—Å–∞–Ω–∏–µ –∫ –±–æ—Ç—É, –º–æ–∂–Ω–æ —É–¥–æ–±–Ω–æ —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Å–≤–æ–∏–º–∏ —Å—Ç–∞—Ç–∞–º–∏, –±–æ—Ç –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–æ–ø–∏–ª–∏–≤–∞–Ω–∏—è, –∏ –±—É–¥–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª))) –Ω–æ –ø–æ—Ç–æ–º )))
            p = list(r[:5])
            p.append(list(r[5:]))
            self.usersbyname[r[2].lower()] = r[0]
            self.users[r[0]] = Player(cur, p)

        cur.execute("SELECT * FROM masters")
        for r in cur.fetchall():
            if not r[0] in self.masters.keys():
                self.masters[r[0]] = set()
            self.masters[r[0]].add(r[1].lower())
        cur.execute("SELECT * FROM squads")
        for r in cur.fetchall():
            self.squadnames[r[1].lower()] = r[0]
            self.squadids[r[1].lower()] = r[2]
        self.updater = Updater(token=token)
        massage_handler = MessageHandler(Filters.text | Filters.command, self.handle_massage)
        start_handler = CommandHandler('start', self.handle_start)
        callback_handler = CallbackQueryHandler(callback=self.handle_callback)
        self.updater.dispatcher.add_handler(start_handler)
        self.updater.dispatcher.add_handler(massage_handler)
        self.updater.dispatcher.add_handler(callback_handler)
        self.updater.start_polling(clean=True)

    def handle_start(self, bot, update):
        message = update.message
        user = message.from_user
        if message.chat.type != "private":
            return
        if user.id in self.blacklist:
            bot.sendMessage(chat_id=message.chat_id, text="–ù–µ –æ—Å–æ–±–æ —Ä–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å.\n–£—Ö–æ–¥–∏",
                            reply_markup=telega.ReplyKeyboardRemove())
            return
        elif user.id not in self.users.keys():
            bot.sendMessage(chat_id=message.chat_id, text="–ü—Ä–∏–≤–µ—Ç, –¥–∞–≤–∞–π –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è.\n–ö–∏–¥–∞–π –º–Ω–µ —Ñ–æ—Ä–≤–∞—Ä–¥ —Å–≤–æ–∏—Ö —Å—Ç–∞—Ç–æ–≤",
                            reply_markup=telega.ReplyKeyboardRemove())
            return
        self.users[user.id].keyboard = KeyboardType.DEFAULT
        bot.sendMessage(chat_id=message.chat_id, text="–†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å",
                        reply_markup=self.keyboards[KeyboardType.DEFAULT])

    def add_admin(self, id):
        conn = sql.connect(self.database)
        if not id in self.admins:
            cur = conn.cursor()
            cur.execute("INSERT INTO admins(id) VALUES (?)", (id,))
            self.admins.add(id)
            conn.commit()

    def del_admin(self, id):
        conn = sql.connect(self.database)
        if id in self.admins:
            cur = conn.cursor()
            cur.execute("DELETE FROM admins WHERE id=?", (id,))
            self.admins.remove(id)
            conn.commit()
            return True
        return False

    def ban(self, cur, id, bann_him=True):
        if not id in self.blacklist:
            self.users[id].delete(cur)
            del (self.usersbyname[self.users[id].username.lower()])
            del (self.users[id])
            if (bann_him):
                cur.execute("INSERT INTO blacklist(id) VALUES (?)", (id,))
                self.blacklist.add(id)

    def unbun(self, id):
        conn = sql.connect(self.database)
        if id in self.blacklist:
            cur = conn.cursor()
            cur.execute("DELETE FROM blacklist WHERE id=?", (id,))
            self.blacklist.remove(id)
            conn.commit()
            return True
        return False

    def add_to_squad(self, cur, id, sq):
        self.users[id].squad = sq
        self.users[id].update_text(cur)

    def del_from_squad(self, cur, id):
        self.users[id].squad = ""
        self.users[id].update_text(cur)

    def add_master(self, cur, bot, id, adminid, sq):
        sq = sq.lower()
        if (sq not in self.squadnames.keys()):
            bot.sendMessage(chat_id=self.users[adminid].chatid, text="–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –æ—Ç—Ä—è–¥–∞")
            return
        if (adminid not in self.admins) and ((adminid not in self.masters.keys()) or (sq not in self.masters[adminid])):
            bot.sendMessage(chat_id=self.users[adminid].chatid, text="–£ –≤–∞—Å –Ω–µ—Ç –Ω–∞ —ç—Ç–æ –ø—Ä–∞–≤. –í–æ–∑—å–º–∏—Ç–µ –∏—Ö —É –ê–Ω—Ç–æ–Ω–∞")
            return
        if (id in self.masters.keys()) and sq in self.masters[id]:
            bot.sendMessage(chat_id=self.users[adminid].chatid, text="–î–∞ –æ–Ω –∏ —Ç–∞–∫ –∫–æ–º–∞–Ω–¥–∏—Ä)")
            return
        cur.execute("INSERT INTO masters(id, name) VALUES (?, ?)", (id, sq))
        self.masters[id].add(sq)

    def add_squad(self, cur, bot, master, short, title, id, chat_id):
        if id not in self.admins:
            bot.sendMessage(chat_id=self.users[id].chatid, text="–•–º... –ê –∫—Ç–æ —Ç–µ–±–µ —Å–∫–∞–∑–∞–ª —á—Ç–æ —Ç—ã —Ç–∞–∫ –º–æ–∂–µ—à—å?")
            return
        if master not in self.users.keys():
            bot.sendMessage(chat_id=chat_id, text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @" + master + " –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
            return
        if (short in self.squadnames.keys()) or short == "none":
            bot.sendMessage(chat_id=chat_id, text="–ö—Ä–∞—Ç–∫–æ–µ –∏–º—è \"" + short + "\" —É–∂–µ –∑–∞–Ω—è—Ç–æ")
            return
        r = (title, short, chat_id)
        cur.execute("INSERT INTO squads(name, short, chatid) VALUES(?, ?, ?)", r)
        self.masters[master] = set()
        self.squadnames[short] = r[0]
        self.squadids[short] = r[2]
        self.add_master(cur, bot, master, id, short)
        bot.sendMessage(chat_id=chat_id,
                        text="–°–æ–∑–¥–∞–Ω –æ—Ç—Ä—è–¥ " + self.squadnames[short] + " aka " + short)

    def stat(self, bot, id, chat_id, n, textmode=False):
        player = self.users[id]
        ps = player.get_stats(n - 1)
        s = "<b>" + player.nic + "</b>\n"
        if player.squad != "":
            s += "–û—Ç—Ä—è–¥: <b>" + self.squadnames[player.squad] + "</b>\n"
        if ps is None:
            return "–≠—Ç–∞ —è—á–µ–π–∫–∞ –ø–∞–º—è—Ç–∏ –µ—â—ë –ø—É—Å—Ç–∞ üôÉ"
        s += "<b>–û—Ç </b>" + str(ps.time) + "\n" \
             "<b>\n–ó–¥–æ—Ä–æ–≤—å–µ:          </b>" + str(ps.hp) + \
             "<b>\n–£—Ä–æ–Ω:                   </b>" + str(ps.attack) + \
             "<b>\n–ë—Ä–æ–Ω—è:                 </b>" + str(ps.deff) + \
             "<b>\n–°–∏–ª–∞:                   </b>" + str(ps.power) + \
             "<b>\n–ú–µ—Ç–∫–æ—Å—Ç—å:           </b>" + str(ps.accuracy) + \
             "<b>\n–•–∞—Ä–∏–∑–º–∞:            </b>" + str(ps.oratory) + \
             "<b>\n–õ–æ–≤–∫–æ—Å—Ç—å:           </b>" + str(ps.agility) + \
             "<b>\n\n–£—Å–ø–µ—à–Ω—ã–µ —Ä–µ–π–¥—ã:     </b>" + str(ps.raids)
        if textmode:
            return s
        else:
            bot.sendMessage(chat_id=chat_id, text=s, parse_mode='HTML')

    def change(self, bot, id, chat_id, n, textmode=False):
        if self.users[id].stats[n - 1] is None:
            return "–≠—Ç–∞ —è—á–µ–π–∫–∞ –ø–∞–º—è—Ç–∏ –µ—â—ë –ø—É—Å—Ç–∞"
        player = self.users[id]
        ops = player.get_stats(n - 1)
        player = self.users[id]
        ps = player.get_stats(4)
        s = "<b>" + player.nic + "</b>\n" \
            + "–ü—Ä–∏—Ä–æ—Å—Ç —Å: " + str(ops.time) + "\n–ü–æ: " + str(ps.time)
        if ps.hp - ops.hp:
            s += "<b>\n–ó–¥–æ—Ä–æ–≤—å–µ:          </b>" + str(ps.hp - ops.hp)
        if ps.attack - ops.attack:
            s += "<b>\n–£—Ä–æ–Ω:                   </b>" + str(ps.attack - ops.attack)
        if ps.deff - ops.deff:
            s += "<b>\n–ë—Ä–æ–Ω—è:                 </b>" + str(ps.deff - ops.deff)
        if ps.power - ops.power:
            s += "<b>\n–°–∏–ª–∞:                   </b>" + str(ps.power - ops.power)
        if ps.accuracy - ops.accuracy:
            s += "<b>\n–ú–µ—Ç–∫–æ—Å—Ç—å:           </b>" + str(ps.accuracy - ops.accuracy)
        if ps.oratory - ops.oratory:
            s += "<b>\n–•–∞—Ä–∏–∑–º–∞:            </b>" + str(ps.oratory - ops.oratory)
        if ps.agility - ops.agility:
            s += "<b>\n–õ–æ–≤–∫–æ—Å—Ç—å:           </b>" + str(ps.agility - ops.agility)
        if ps.raids - ops.raids:
            s += "<b>\n\n–£—Å–ø–µ—à–Ω—ã–µ —Ä–µ–π–¥—ã:     </b>" + str(ps.raids - ops.raids)
        if textmode == True:
            return s
        else:
            bot.sendMessage(chat_id=chat_id, text=s, parse_mode='HTML')

    def handle_forward(self, cur, bot, message):
        user = message.from_user
        player = self.users[user.id]
        text = message.text.strip(" \n\t")
        player.username = user.username
        self.usersbyname[user.username] = user.id
        tlines = text.split("\n")
        ps = PlayerStat(cur)
        n = -1
        nic = ""
        for i in range(1, len(tlines)):
            if tlines[i] and tlines[i][0] == '‚îú' and tlines[i - 1][0] == '‚îú':
                n = i - 2
                break
        if n >= 0:
            nic = tlines[n][1:]
            ps.hp, hanger, ps.attack, ps.deff = [int("".join([c for c in x if c.isdigit()])) for x in
                                                 tlines[n + 2][tlines[n + 2].find("/"):].split('|')]
            ps.power, ps.accuracy = [int("".join([c for c in x if c.isdigit()])) for x in tlines[n + 3].split('|')]
            ps.oratory, ps.agility = [int("".join([c for c in x if c.isdigit()])) for x in tlines[n + 4].split('|')]
        else:
            nl = 2  # –ú–ê–ì–ò–ß–ï–°–ö–ê–Ø –ö–û–ù–°–¢–ê–ù–¢–ê –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ —Å –Ω–∏–∫–æ–º –∏–≥—Ä–æ–∫–∞ [–ø–µ—Ä–≤—ã–π –≤–æ–∑–º–æ–∂–Ω—ã–π]
            while nl < len(tlines):
                if "–§—Ä–∞–∫—Ü–∏—è:" in tlines[nl + 1]:
                    break
                nl += 1
            nic = tlines[nl].strip()
            for i in range(nl + 1, len(tlines)):
                m = re.search(r'–ó–¥–æ—Ä–æ–≤—å–µ:[\s][\d]+/(?P<val>[\d]+)', tlines[i])
                if m:
                    ps.hp = int(m.group('val'))
                m = re.search(r'–£—Ä–æ–Ω:[\s](?P<val>[\d]+)', tlines[i])
                if m:
                    ps.attack = int(m.group('val'))
                m = re.search(r'–ë—Ä–æ–Ω—è:[\s](?P<val>[\d]+)', tlines[i])
                if m:
                    ps.deff = int(m.group('val'))
                m = re.search(r'–°–∏–ª–∞:[\s](?P<val>[\d]+)', tlines[i])
                if m:
                    ps.power = int(m.group('val'))
                m = re.search(r'–ú–µ—Ç–∫–æ—Å—Ç—å:[\s](?P<val>[\d]+)', tlines[i])
                if m:
                    ps.accuracy= int(m.group('val'))
                m = re.search(r'–•–∞—Ä–∏–∑–º–∞:[\s](?P<val>[\d]+)', tlines[i])
                if m:
                    ps.oratory = int(m.group('val'))
                m = re.search(r'–õ–æ–≤–∫–æ—Å—Ç—å:[\s](?P<val>[\d]+)', tlines[i])
                if m:
                    ps.agility = int(m.group('val'))
        nic = nic.replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;")
        if player.nic == "":
            player.nic = nic
        elif player.nic != nic:
            bot.sendMessage(chat_id=player.chatid,
                            text="ü§î –†–∞–Ω—å—à–µ —Ç—ã –∏–≥—Ä–∞–ª –ø–æ–¥ –¥—Ä—É–≥–∏–º –Ω–∏–∫–æ–º.\n–ï—Å–ª–∏ —Ç—ã —Å–º–µ–Ω–∏–ª –∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫ –æ–±—Ä–∞—Ç–∏—Å—å –∫ @ant_ant\n–ê –∏–Ω—á–µ –Ω–µ –∫–∏–¥–∞–π –º–Ω–µ —á—É–∂–æ–π –ø—Ä–æ—Ñ–∏–ª—å!")
            return False
        ps.time = message.forward_date
        oldps = player.get_stats(4)
        ps.raids = 0
        if oldps is not None:
            player.set_stats(cur, oldps, 3)
            ps.raids = oldps.raids
        if "–†–µ–π–¥ –≤ " in tlines[-3]:
            goone = True
            date = message.forward_date
            try:
                time = tlines[-3].split()[-1]
                ddate = datetime.datetime(year=date.year, month=date.month, day=date.day,
                                          hour=int(time.split(':')[0]) % 24)
                if message.date - ddate < datetime.timedelta(milliseconds=10):
                    ddate = ddate - datetime.timedelta(days=1)
                date = str(ddate).split('.')[0]
            except:
                goone = False
            if goone and ((user.id, date) not in self.raids):
                self.raids.add((user.id, date))
                ps.raids += 1
                ps.update_raids(cur, user.id, date)
                if player.squad in self.squadnames.keys():
                    text = "<b>" + player.nic + "</b> aka @" + player.username + " –æ—Ç–ª–∏—á–∏–ª—Å—è –Ω–∞ —Ä–µ–π–¥–µ \n" + date + "\n" + \
                           tlines[-2] + "\n" + tlines[-1]
                    text.replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;")
                    try:
                        bot.sendMessage(chat_id=self.squadids[player.squad], text=text, parse_mode='HTML')
                    except:
                        try:
                            bot.sendMessage(chat_id=player.chatid,
                                            text="–Ø –Ω–µ —Å–º–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–≤–æ–π –æ—Ç—Ä—è–¥\n–ï—Å–ª–∏ —Ö–æ—á–µ—à—å - –æ—Ç–ø—Ä–∞–≤—å –µ–≥–æ —Å–∞–º:\n\n" + text,
                                            parse_mode='HTML')
                        except:
                            pass
                try:
                    bot.sendMessage(chat_id=player.chatid, text="–ó–∞—Å—á–∏—Ç–∞–Ω —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–π–¥", parse_mode='HTML')
                except:
                    pass
        player.set_stats(cur, ps, 4)
        player.update_text(cur)
        bot.sendMessage(chat_id=player.chatid, text="–Ø –∑–∞–Ω–µ—Å —Ç–≤–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
        return True

    def top(self, bot, id, username, chat_id, text, type: StatType, invisible=False, title="",
            time=datetime.datetime.now(), textmode=False):
        arr = []
        s = ""
        if title:
            s = "<b>" + title + ":</b>"
        if type == StatType.ALL:
            if not s:
                s = "<b>–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤:</b>"
            arr = [(pl.get_stats(4).sum(), pl.username, pl.nic, pl.squad, pl.stats[4].time) for pl in
                   self.users.values()]
        elif type == StatType.HP:
            if not s:
                s = "<b>–¢–æ–ø —Ç–∞–Ω–∫–æ–≤:</b>"
            arr = [(pl.get_stats(4).hp, pl.username, pl.nic, pl.squad, pl.stats[4].time) for pl in self.users.values()]
        elif type == StatType.ATTACK:
            if not s:
                s = "<b>–¢–æ–ø –¥–∞–º–∞–≥–µ—Ä–æ–≤:</b>"
            arr = [(pl.get_stats(4).attack, pl.username, pl.nic, pl.squad, pl.stats[4].time) for pl in
                   self.users.values()]
        elif type == StatType.ACCURACY:
            if not s:
                s = "<b>–¢–æ–ø —Å–Ω–∞–π–ø–µ—Ä–æ–≤:</b>"
            arr = [(pl.get_stats(4).accuracy, pl.username, pl.nic, pl.squad, pl.stats[4].time) for pl in
                   self.users.values()]
        elif type == StatType.AGILITY:
            if not s:
                s = "<b>–¢–æ–ø –ª–æ–≤–∫–∞—á–µ–π:</b>"
            arr = [(pl.get_stats(4).agility, pl.username, pl.nic, pl.squad, pl.stats[4].time) for pl in
                   self.users.values()]
        elif type == StatType.ORATORY:
            if not s:
                s = "<b>–¢–æ–ø –¥–∏–ø–ª–æ–º–∞—Ç–æ–≤:</b>"
            arr = [(pl.get_stats(4).oratory, pl.username, pl.nic, pl.squad, pl.stats[4].time) for pl in
                   self.users.values()]
        elif type == StatType.RAIDS:
            if not s:
                s = "<b>–¢–æ–ø —Ä–µ–π–¥–µ—Ä–æ–≤:</b>"
            arr = [(pl.get_stats(4).raids, pl.username, pl.nic, pl.squad, pl.stats[4].time) for pl in
                   self.users.values()]
        else:
            return
        arr.sort(reverse=True)
        sq = ""
        con1 = True
        cap = False
        admin = id in self.admins
        if text != "" and len(text.split()) != 1:
            sq = text.split()[1].lower()
            cap = id in self.masters.keys() and sq in self.masters[id]
            if self.users[id].squad != sq and not cap and not admin:
                bot.sendMessage(chat_id=chat_id, text="–ü–æ—Ö–æ–∂–µ, —ç—Ç–æ –Ω–µ –≤–∞—à –æ—Ç—Ä—è–¥", parse_mode='HTML')
                return
            if sq in self.squadnames.keys():
                con1 = False
                s = s[:-5] + "</b> –æ—Ç—Ä—è–¥–∞ <b>" + self.squadnames[sq] + ":</b>"
        i = 1
        sum = 0
        for val, name, nic, squad, lasttime in arr:
            lasttime = str(lasttime)
            lasttime = datetime.datetime.strptime(lasttime.split('.')[0], "%Y-%m-%d %H:%M:%S")
            if con1 or squad == sq:
                if (id in self.admins) or i <= 5 or (con1 and cap) or invisible or name == username:
                    if (id in self.admins) or (con1 and cap):
                        if time - lasttime > datetime.timedelta(days=30):
                            s += "\n" + str(i) + ') ----<a href = "t.me/' + name + '">' + nic + '</a>'
                        elif time - lasttime > datetime.timedelta(days=7):
                            s += "\n" + str(i) + ') ***<a href = "t.me/' + name + '">' + nic + '</a>'
                        elif time - lasttime > datetime.timedelta(days=3):
                            s += "\n" + str(i) + ') **<a href = "t.me/' + name + '">' + nic + '</a>'
                        elif time - lasttime > datetime.timedelta(hours=36):
                            s += "\n" + str(i) + ') *<a href = "t.me/' + name + '">' + nic + '</a>'
                        else:
                            s += "\n" + str(i) + ') <a href = "t.me/' + name + '">' + nic + ' </a>'
                    else:
                        s += "\n" + str(i) + ') <a href = "t.me/' + name + '">' + nic + ' </a>'
                    if (not invisible) and (
                                    id in self.admins or name == username or type == StatType.ALL or type == StatType.RAIDS):
                        s += ": <b>" + str(val) + "</b>"
                    elif not invisible:
                        s += ": <b>" + str(val)[0] + "*" * (len(str(val)) - 1) + "</b>"
                    sum += val
                if i == 5 and not invisible:
                    s += "\n"
                i += 1
        if (id in self.admins or (con1 and cap)) and not invisible:
            s += "\n\n–û–±—â–∏–π —Å—á–µ—Ç: " + str(sum)
        if not textmode:
            bot.sendMessage(chat_id=chat_id, text=s, parse_mode='HTML', disable_web_page_preview=True)
        else:
            return s

    def list_squads(self, bot, chat_id, show_pin = False):
        text = ""
        for sqshort, sqname in self.squadnames.items():
            text += "<b>" + sqname + "</b> aka <i>" + sqshort + "</i>"
            if show_pin:
                if self.pinkm and sqshort in self.pinkm.chatm.keys():
                    text += " \t‚úÖ"
                else:
                    text+= " \t‚ùå"
            text += "\n"
        bot.sendMessage(chat_id=chat_id, text=text, parse_mode='HTML', disable_web_page_preview=True)

    def pin(self, bot, chat_id, text, uid):
        id = -1
        try:
            id = bot.sendMessage(chat_id=chat_id, text=text, parse_mode='HTML').message_id
        except:
            bot.sendMessage(chat_id=uid, text="–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
        time.sleep(1)
        try:
            bot.pinChatMessage(chat_id=chat_id, message_id=id)
        except:
            bot.sendMessage(chat_id=uid, text="–Ø –Ω–µ —Å–º–æ–≥ –∑–∞–ø–∏–Ω–∏—Ç—å((")
            return
        bot.sendMessage(chat_id=uid, text="–ì–æ—Ç–æ–≤–æ\n–°–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–∏–Ω–µ")

    def demand_squads(self, text, user, bot):
        if len(text.split()) <= 2:
            bot.sendMessage(chat_id=self.users[user.id].chatid, text="—Å–æ–æ–±—â–µ–Ω–∏—è-—Ç–æ –∏ –Ω–µ—Ö–≤–∞—Ç–∞–µ—Ç")
            return None, None
        split = text.split()
        sqs = []
        start = -1
        for word in split[1:]:
            if word in self.squadnames.keys():
                sqs.append(word)
            else:
                start = text.find(word)
                break
        if not sqs:
            bot.sendMessage(chat_id=self.users[user.id].chatid,
                            text="–í–µ—Å–µ–ª–æ –Ω–∞–≤–µ—Ä–Ω–æ–µ –ø–∏—Å–∞—Ç—å –≤ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ—Ç—Ä—è–¥")
            return None, None
        if user.id not in self.admins and user.id not in self.masters.keys() and not any(sq in self.masters[
            user.id] for sq in sqs):
            bot.sendMessage(chat_id=self.users[user.id].chatid,
                            text="–ù–µ–±–µ—Å–∞ –Ω–µ –æ–¥–∞—Ä–∏–ª–∏ —Ç–µ–±—è —Å—Ç–æ–ª—å –≤–µ–ª–∏–∫–æ–π –≤–ª–∞—Å—Ç—å—é\n–ú–æ–∂–µ—à—å —Ä–∏—Å–∫–Ω—É—Ç—å –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∑–∞ "
                                 "–Ω–µ–π –∫ –ê–Ω—Ç–æ–Ω—É")
            return None, None
        if not text[start:]:
            bot.sendMessage(chat_id=self.users[user.id].chatid, text="–ù–æ —á—Ç–æ –∂–µ –º–Ω–µ –∏–º –Ω–∞–ø–∏—Å–∞—Ç—å?")
            return None, None
        return sqs, text[start:]

    def demand_ids(self, text, user, bot, offset=1, all = False):
        """–Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É"""
        if len(text.split()) <= 2:
            bot.sendMessage(chat_id=self.users[user.id].chatid, text="–ß–µ–≥–æ-—Ç–æ –∑–¥–µ—Å—å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç")
            return None, None
        ids = []
        start = -1
        split = text.split()
        for word in split[offset:]:
            if word.strip('@').lower() in self.usersbyname.keys():
                ids.append(self.usersbyname[word.strip('@').lower()])
            elif not all:
                start = text.find(word)
                break
            else:
                bot.sendMessage(chat_id=self.users[user.id].chatid,
                                text="–ù–µ –∑–Ω–∞—é –∏–≥—Ä–æ–∫–∞ –ø–æ –∏–º–µ–Ω–∏ @" + name)

        if not ids:
            bot.sendMessage(chat_id=self.users[user.id].chatid,
                            text="–Ø –Ω–µ –Ω–∞—à—ë–ª –Ω–∏ –æ–¥–Ω–æ–≥–æ —é–∑–µ—Ä–Ω–µ–π–º–∞")
        return text[start:], ids

    def handle_command(self, cur, conn, bot, message):
        text = message.text
        user = message.from_user
        chat_id = message.chat_id
        text0 = text[:text.find(' ')] if text.find(' ') > 0 else text
        text0 = text0[:text0.find(self.bot_name)] if text0.find(self.bot_name) > 0 else text0
        if text0 == '/me':
            n = 5
            if len(text.split()) > 1 and text.split()[1].isdigit():
                n = int(text.split()[1])
                if n < 1 or n > 3 or self.users[user.id].stats[n - 1] is None:
                    s = [str(i + 1) + ", " for i in range(3) if self.users[user.id].stats[i] is not None]
                    s = "".join(s).strip(", ")
                    if not s:
                        bot.sendMessage(chat_id=chat_id, text="–£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π")
                    else:
                        bot.sendMessage(chat_id=chat_id, text="–î–æ—Å—Ç—É–ø–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è " + s)
                    return
            self.stat(bot, user.id, chat_id, n)
        elif text0 == '/change':
            n = 4
            player = self.users[user.id]
            if len(text.split()) > 1 and text.split()[1].isdigit():
                n = int(text.split()[1])
                if n < 1 or n > 3 or player.stats[n - 1] is None:
                    s = [str(i + 1) + ", " for i in range(3) if player.stats[i] is not None]
                    s = "".join(s).strip(", ")
                    if not s:
                        bot.sendMessage(chat_id=chat_id, text="–£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π")
                    else:
                        bot.sendMessage(chat_id=chat_id, text="–î–æ—Å—Ç—É–ø–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è " + s)
                    return
            if player.stats[n - 1] is None:
                bot.sendMessage(chat_id=chat_id, text="–ü—Ä–∏—à–ª—ë—à—å –º–Ω–µ –µ—â—ë –æ–¥–∏–Ω —Ñ–æ—Ä–≤–∞—Ä–¥ —Ç–≤–æ–∏—Ö —Å—Ç–∞—Ç–æ–≤?")
                return
            self.change(bot, user.id, chat_id, n)
        elif text0 == '/stat':
            name = ""
            try:
                name = text.split()[1].strip("@").lower()
            except ImportError:
                bot.sendMessage(chat_id=chat_id, text="–ê —á—å–∏ —Å—Ç–∞—Ç—ã-—Ç–æ?")
                return
            if name not in self.usersbyname.keys():
                # print(name)
                bot.sendMessage(chat_id=chat_id, text="–ö—Ç–æ —ç—Ç–æ –≤–æ–æ–±—â–µ —Ç–∞–∫–æ–π? –Ø –µ–≥–æ –Ω–µ –∑–Ω–∞—é...")
                return
            if (user.id not in self.admins) and (
                            user.id not in self.masters.keys() or self.users[self.usersbyname[name]].squad not in
                        self.masters[
                            user.id]):
                bot.sendMessage(chat_id=chat_id, text="–õ—é–±–æ–ø—ã—Ç—Å—Ç–≤–æ –Ω–µ –ø–æ—Ä–æ–∫\n–ù–æ –º–µ—Ä—É —Ç–æ –∑–Ω–∞—Ç—å –Ω–∞–¥–æ...")
                return
            self.stat(bot, self.usersbyname[name], chat_id, 5)
        elif text0[:-1] == '/save' and 1 <= int(text0[-1]) <= 3:
            player = self.users[user.id]
            ps = player.get_stats(4)
            player.set_stats(cur, ps, int(text0[-1]) - 1)
            conn.commit()
            bot.sendMessage(chat_id=chat_id, text="–¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —è—á–µ–π–∫—É ‚Ññ" + text0[-1])
        elif text0 == '/top':
            self.top(bot, user.id, user.username, chat_id, text, StatType.ALL, time=message.date)
        elif text0 == '/rushtop':
            self.top(bot, user.id, user.username, chat_id, text, StatType.ATTACK, time=message.date)
        elif text0 == '/hptop':
            self.top(bot, user.id, user.username, chat_id, text, StatType.HP, time=message.date)
        elif text0 == '/acctop':
            self.top(bot, user.id, user.username, chat_id, text, StatType.ACCURACY, time=message.date)
        elif text0 == '/agtop':
            self.top(bot, user.id, user.username, chat_id, text, StatType.AGILITY, time=message.date)
        elif text0 == '/ortop':
            self.top(bot, user.id, user.username, chat_id, text, StatType.ORATORY, time=message.date)
        elif text0 == '/raidtop':
            self.top(bot, user.id, user.username, chat_id, text, StatType.RAIDS, time=message.date)
        elif text0 == '/players':
            self.top(bot, user.id, user.username, chat_id, text, StatType.ALL, invisible=True, title="–ò–≥—Ä–æ–∫–∏",
                     time=message.date)
        elif text0 == "/new_squad" and (user.id in self.admins) and (
                        message.chat.type == "group" or message.chat.type == "supergroup"):
            short, master = "", ""
            try:
                short, master = text.split()[1:3]
            except ValueError:
                bot.sendMessage(id=self.users[user.id].chatid, text="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã")
                return
            master = master.strip("@").lower()
            if master not in self.usersbyname.keys():
                bot.sendMessage(chat_id=self.users[user.id].chatid, text="–Ω–µ –∑–Ω–∞—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @" + master)
                return
            self.add_squad(cur, bot, self.usersbyname[master], short.lower(), message.chat.title, user.id, chat_id)
            conn.commit()
        elif text0 == "/make_master":
            short, master = "", ""
            try:
                short, master = text.split()[1:3]
            except ValueError:
                bot.sendMessage(id=self.users[user.id].chatid, text="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã")
                return
            master = master.strip("@").lower()
            if master not in self.usersbyname.keys():
                bot.sendMessage(chat_id=self.users[user.id].chatid, text="–Ω–µ –∑–Ω–∞—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @" + master)
                return
            self.add_master(cur, bot, self.usersbyname[master], user.id, short)
            conn.commit()
        elif text0 == "/add":
            short, player = "", ""
            try:
                short, player = text.split()[1:3]
            except ValueError:
                bot.sendMessage(id=self.users[user.id].chatid, text="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã")
                return
            player = player.strip("@").lower()
            short = short.lower()
            if player not in self.usersbyname.keys():
                bot.sendMessage(chat_id=self.users[user.id].chatid, text="–Ω–µ –∑–Ω–∞—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @" + player)
                return
            if short not in self.squadnames.keys():
                bot.sendMessage(chat_id=self.users[user.id].chatid, text="–ù–µ –∑–Ω–∞—é —Ç–∞–∫–æ–≥–æ –æ—Ç—Ä—è–¥–∞")
                return
            if (user.id not in self.admins) and (
                            user.id not in self.masters.keys() or short not in self.masters[user.id]):
                bot.sendMessage(chat_id=chat_id, text="–£ —Ç–µ–±—è –Ω–µ—Ç —Ç–∞–∫–æ–π –≤–ª–∞—Å—Ç–∏")
                return
            self.add_to_squad(cur, self.usersbyname[player], short)
            bot.sendMessage(chat_id=chat_id,
                            text=("@" + player + " —Ç–µ–ø–µ—Ä—å –≤ –æ—Ç—Ä—è–¥–µ <b>" + self.squadnames[short] + "</b>"),
                            parse_mode='HTML')
            conn.commit()
        elif text0 == "/echo":
            sqs, msg = self.demand_squads(text, user, bot)
            if sqs:
                for pl in self.users.values():
                    for sq in sqs:
                        if sq is None or sq == pl.squad:
                            try:
                                bot.sendMessage(chat_id=pl.chatid, text=msg)
                            except:
                                bot.sendMessage(chat_id=self.users[user.id].chatid,
                                                text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @" + pl.username + " –æ—Ç–∫–ª—é—á–∏–ª –±–æ—Ç–∞")
                            break
            bot.sendMessage(chat_id=self.users[user.id].chatid, text="–í–∞—à –∑–æ–≤ –±—ã–ª —É—Å–ª—ã—à–∞–Ω")
        elif text0 == "/echo-s":
            sqs, msg = self.demand_squads(text, user, bot)
            if sqs:
                for sq in sqs:
                    bot.sendMessage(chat_id=self.squadids[sq], text=msg, reply_markup=telega.ReplyKeyboardRemove())
                bot.sendMessage(chat_id=self.users[user.id].chatid, text="–í–∞—à –∑–æ–≤ –±—ã–ª —É—Å–ª—ã—à–∞–Ω")
        elif text0 == "/pin":
            sqs, msg = self.demand_squads(text, user, bot)
            if sqs:
                for sq in sqs:
                    self.pin(bot=bot, chat_id=self.squadids[sq], text=msg, uid=chat_id)
        elif text0 == "/rename":
            if user.id not in self.admins:
                bot.sendMessage(chat_id=self.users[user.id].chatid,
                                text="–í–µ–ª–∏–∫–∞—è —Å–∏–ª–∞ - —ç—Ç–æ –≤–µ–ª–∏–∫–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å\n–†–∞–∑–≤–µ —Ç—ã –Ω–∞—Å—Ç–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–µ–Ω?")
                return
            if len(text.split()) < 3:
                bot.sendMessage(chat_id=self.users[user.id].chatid, text="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
                return
            pl = text.split()[1].strip("@").lower()
            if pl not in self.usersbyname.keys():
                bot.sendMessage(chat_id=self.users[user.id].chatid, text="–ù–µ –∑–Ω–∞—é —Ç–∞–∫–æ–≥–æ")
                return
            text = text + " \n"
            for i in range(2):
                k = min(text.find(" "), text.find("\n"))
                text = text[k + 1:]
            text = text.strip()
            player = self.users[self.usersbyname[pl]]
            player.nic = text
            player.update_text(cur)
            conn.commit()
            bot.sendMessage(chat_id=self.users[user.id].chatid,
                            text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @" + player.username + " —Ç–µ–ø–µ—Ä—å –∑–æ–≤—É—Ç <b>" + player.nic + "</b>",
                            parse_mode='HTML')
            return
        elif text0 == "/ban":
            if user.id not in self.admins:
                bot.sendMessage(chat_id=self.users[user.id].chatid,
                                text="–í–µ–ª–∏–∫–∞—è —Å–∏–ª–∞ - —ç—Ç–æ –≤–µ–ª–∏–∫–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å\n–†–∞–∑–≤–µ —Ç—ã –Ω–∞—Å—Ç–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–µ–Ω?")
                return
            if len(text.split()) != 2:
                bot.sendMessage(chat_id=self.users[user.id].chatid, text="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
                return
            pl = text.split()[1].strip("@").lower()
            if pl not in self.usersbyname.keys():
                bot.sendMessage(chat_id=self.users[user.id].chatid, text="–ù–µ –∑–Ω–∞—é —Ç–∞–∫–æ–≥–æ")
                return
            self.ban(cur, self.usersbyname[pl])
            bot.sendMessage(chat_id=chat_id, text="–í—ã –µ–≥–æ –±–æ–ª—å—à–µ –Ω–µ —É–≤–∏–¥–∏—Ç–µ")
            conn.commit()
        elif text0 == "/kick":
            if user.id not in self.admins:
                bot.sendMessage(chat_id=self.users[user.id].chatid,
                                text="–í–µ–ª–∏–∫–∞—è —Å–∏–ª–∞ - —ç—Ç–æ –≤–µ–ª–∏–∫–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å\n–†–∞–∑–≤–µ —Ç—ã –Ω–∞—Å—Ç–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–µ–Ω?")
                return
            if len(text.split()) != 2:
                bot.sendMessage(chat_id=self.users[user.id].chatid, text="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
                return
            pl = text.split()[1].strip("@").lower()
            if pl not in self.usersbyname.keys():
                bot.sendMessage(chat_id=self.users[user.id].chatid, text="–ù–µ –∑–Ω–∞—é —Ç–∞–∫–æ–≥–æ")
                return
            self.ban(cur, self.usersbyname[pl], False)
            bot.sendMessage(chat_id=chat_id, text="–Ø –≤—ã–∫–∏–Ω—É–ª –µ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–æ–≤")
            conn.commit()
        elif text0 == "/expel":
            pl = text.split()[1].strip("@").lower()
            if pl not in self.usersbyname.keys():
                bot.sendMessage(chat_id=self.users[user.id].chatid, text="–ù–µ –∑–Ω–∞—é —Ç–∞–∫–æ–≥–æ")
                return
            player = self.users[self.usersbyname[pl]]
            if (user.id not in self.admins) and (
                    user.id not in self.masters.keys() and player.squad not in self.masters[
                user.id]):
                bot.sendMessage(chat_id=self.users[user.id].chatid,
                                text="–°–æ–º–Ω–µ–≤–∞—é—Å—å —á—Ç–æ –≤–∞—à–∏—Ö –ø–æ–ª–Ω–æ–º–æ—á–∏–π –Ω–∞ —ç—Ç–æ —Ö–≤–∞—Ç–∏—Ç...")
                return
            self.del_from_squad(cur, player.id)
            bot.sendMessage(chat_id=chat_id, text="–ë–æ–ª—å—à–µ –æ–Ω –Ω–µ –≤ –æ—Ç—Ä—è–¥–µ")
        elif text0 == "/online":
            if user.id not in self.admins:
                bot.sendMessage(chat_id=self.users[user.id].chatid,
                                text="–ß—Ç–æ-—Ç–æ –Ω–µ –≤–∏–∂—É —è —É —Ç–µ–±—è –∞–¥–º–∏–Ω–∫–∏?\n–ì–¥–µ –ø–æ—Ç–µ—Ä—è–ª?")
                return
            if self.pinonline is None:
                self.pinonline = PinOnline(self.squadids, bot)
            for sq in text.split()[1:]:
                self.pinonline.pin(sq, self.users[user.id].chatid)
        elif text0 == "/copyonline":
            if user.id not in self.admins:
                bot.sendMessage(chat_id=self.users[user.id].chatid,
                                text="–ß—Ç–æ-—Ç–æ –Ω–µ –≤–∏–∂—É —è —É —Ç–µ–±—è –∞–¥–º–∏–Ω–∫–∏?\n–ì–¥–µ –ø–æ—Ç–µ—Ä—è–ª?")
                return
            if self.pinonline is None:
                self.pinonline = PinOnline(self.squadids, bot)
            self.pinonline.copy_to(chat_id)
        elif text0 == "/pinonkm":
            if user.id not in self.admins:
                bot.sendMessage(chat_id=self.users[user.id].chatid,
                                text="–ß—Ç–æ-—Ç–æ –Ω–µ –≤–∏–∂—É —è —É —Ç–µ–±—è –∞–¥–º–∏–Ω–∫–∏?\n–ì–¥–µ –ø–æ—Ç–µ—Ä—è–ª?")
                return
            if self.pinkm is None:
                self.pinkm = PinOnlineKm(self.squadids, bot)
            sqs, msg = self.demand_squads(text, user, bot)
            if sqs:
                for sq in sqs:
                    self.pinkm.pin(sq, self.users[user.id].chatid, msg)
        elif text0 == "/closekm":
            if user.id not in self.admins:
                bot.sendMessage(chat_id=self.users[user.id].chatid,
                                text="–ß—Ç–æ-—Ç–æ –Ω–µ –≤–∏–∂—É —è —É —Ç–µ–±—è –∞–¥–º–∏–Ω–∫–∏?\n–ì–¥–µ –ø–æ—Ç–µ—Ä—è–ª?")
                return
            if self.pinkm is None:
                return
            self.pinkm.close()
            self.pinkm = None

        elif text0 == "/copykm":
            if user.id not in self.admins:
                bot.sendMessage(chat_id=self.users[user.id].chatid,
                                text="–ß—Ç–æ-—Ç–æ –Ω–µ –≤–∏–∂—É —è —É —Ç–µ–±—è –∞–¥–º–∏–Ω–∫–∏?\n–ì–¥–µ –ø–æ—Ç–µ—Ä—è–ª?")
                return
            if self.pinkm is None:
                return
            self.pinkm.copy_to(chat_id)
        elif text0.lower() == "/viva_six":
            if chat_id not in self.viva_six.keys():
                self.viva_six[chat_id] = 0
            if self.viva_six[chat_id] % 2 == 0:
                bot.sendMessage(chat_id=chat_id, text="/VIVA_SIX")
            else:
                bot.sendSticker(chat_id=chat_id, sticker="CAADAgADawAD73zLFo43Bv0UZFkCAg")
            self.viva_six[chat_id] += 1
        elif text0 == "/faq":
            text = "<b>–ù–µ–ø–ª–æ—Ö–æ–π FAQ –ø–æ –∏–≥—Ä–µ:</b> http://telegra.ph/FAQ-02-13-3\n"
            bot.sendMessage(chat_id=chat_id, text=text, parse_mode='HTML', disable_web_page_preview=False)
        elif text0 == "/dungs":
            text = "<b>–ì–∞–π–¥ –ø–æ –ø–æ–¥–∑–µ–º–µ–ª—å—è–º: </b> http://telegra.ph/Podzemelya-02-13\n"
            bot.sendMessage(chat_id=chat_id, text=text, parse_mode='HTML', disable_web_page_preview=False)
        elif text0 == '/squads':
            self.list_squads(bot, chat_id, (user.id in self.admins))
        else:
            if message.chat.type == "private":
                bot.sendMessage(chat_id=self.users[user.id].chatid, text="–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞... –°–∞–º –ø—Ä–∏–¥—É–º–∞–ª?")

    def start(self):
        self.updater.start_polling()

    def handle_massage(self, bot, update):
        message = update.message
        chat_id = message.chat_id
        user = message.from_user
        # print("!",  message.chat_id, user.username)
        if user.id in self.blacklist and message.chat.type == "private":
            bot.sendMessage(chat_id=chat_id, text="–ü—Ä–æ—Å—Ç–∏, –Ω–æ —Ç–µ–±–µ –∑–¥–µ—Å—å –Ω–µ —Ä–∞–¥—ã")
            return
        text = message.text.strip(" \n\t")
        conn = None
        cur = None
        try:
            conn = sql.connect(self.database)
            cur = conn.cursor()
        except sql.Error as e:
            print("Sql error occurred:", e.args[0])
        if (message.forward_from is not None) and (message.forward_from.id == 430930191) and (
                        'üó£' in text and '‚ù§Ô∏è' in text and 'üî•' in text and '‚öîÔ∏è' in text) and message.chat.type == "private":
            if user.id not in self.users.keys():
                if "–£–±–µ–∂–∏—â–µ 6" not in text:
                    bot.sendMessage(chat_id=chat_id, text="–ê —Ç—ã —Ñ—Ä–∞–∫—Ü–∏–µ–π –Ω–µ –æ—à–∏–±—Å—è?")
                    return
                if message.date - message.forward_date > datetime.timedelta(minutes=2):
                    bot.sendMessage(chat_id=chat_id, text="–ê –º–æ–∂–Ω–æ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ—Å–≤–µ–∂–µ–µ?")
                    return
                self.users[user.id] = Player(cur)
                self.users[user.id].id = user.id
                self.users[user.id].chatid = chat_id
                self.usersbyname[user.username.lower()] = user.id
                try:
                    cur.execute("INSERT INTO users(id, chatid, username) VALUES(?, ?, ?)",
                                (user.id, chat_id, user.username))
                    if not self.handle_forward(cur, bot, message):
                        del (self.users[user.id])
                        del (self.usersbyname[user.username])
                        return
                except:
                    del (self.users[user.id])
                    del (self.usersbyname[user.username])
                    return
                conn.commit()
                self.users[user.id].keyboard = KeyboardType.DEFAULT
                bot.sendMessage(chat_id=chat_id, text="–Ø —Ç–µ–±—è –∑–∞–ø–æ–º–Ω–∏–ª",
                                reply_markup=self.keyboards[KeyboardType.DEFAULT])
            elif self.handle_forward(cur, bot, message):
                conn.commit()
            return
        if user.id not in self.users.keys():
            if message.chat.type == "private":
                bot.sendMessage(chat_id=chat_id, text="–ú—ã –µ—â—ë –Ω–µ –∑–Ω–∞–∫–æ–º—ã. –°–∫–∏–Ω—å –º–Ω–µ —Ñ–æ—Ä–≤–∞—Ä–¥ —Å–≤–æ–∏—Ö —Å—Ç–∞—Ç–æ–≤))",
                                reply_markup=telega.ReplyKeyboardRemove())
            return
        if text[0] == '/':
            self.handle_command(cur, conn, bot, message)
            if message.chat.type == "private":
                bot.sendMessage(reply_markup=self.keyboards[self.users[user.id].keyboard])
        else:
            player = self.users[user.id]
            if message.chat.type == "private":
                if text == "üîô –ù–∞–∑–∞–¥":
                    player.keyboard = KeyboardType.DEFAULT
                    bot.sendMessage(chat_id=chat_id, text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>",
                                    reply_markup=self.keyboards[player.keyboard], parse_mode='HTML')
                    return
                if player.keyboard == KeyboardType.DEFAULT:
                    if text == "üëª –û –±–æ—Ç–µ":
                        self.info(bot, player)
                        return
                    elif text == "üë®‚Äçüíª –û –∂–∏–∑–Ω–∏":
                        self.guide(bot, player, private=True)
                        return
                    elif text == "üéñ –¢–æ–ø—ã":
                        player.keyboard = KeyboardType.TOP
                        bot.sendMessage(chat_id=chat_id,
                                        text="–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–∫–∏ –ª—É—á—à–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ 6 —É–±–µ–∂–∏—â–∞\n"
                                             "<i>* –ø–µ—Ä–µ–¥ –∏–º–µ–Ω–µ–º –∏–≥—Ä–æ–∫–∞ –≥–æ–≤–æ—Ä—è—Ç –æ —Ç–æ–º, —á—Ç–æ –µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—å —É—Å—Ç–∞—Ä–µ–ª, —á–µ–º –∏—Ö –º–µ–Ω—å—à–µ —Ç–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–µ–µ –¥–∞–Ω–Ω—ã–µ</i>",
                                        reply_markup=self.keyboards[player.keyboard], parse_mode='HTML')
                        return
                    elif text == "üíΩ –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
                        player.keyboard = KeyboardType.STATS
                        bot.sendMessage(chat_id=chat_id,
                                        text="–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ —Å—Ç–∞—Ç—ã, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Ö –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∏—Ä–æ—Å—Ç",
                                        reply_markup=self.keyboards[player.keyboard], parse_mode='HTML')
                        return
                elif player.keyboard == KeyboardType.TOP:
                    s = ""
                    ctext = ""
                    if text == "üèÖ –†–µ–π—Ç–∏–Ω–≥":
                        ctext = "top"
                        s = self.top(bot, user.id, user.username, chat_id, "", StatType.ALL, time=message.date,
                                     textmode=True)
                    elif text == "‚öîÔ∏è –î–∞–º–∞–≥–µ—Ä—ã":
                        ctext = "rushtop"
                        s = self.top(bot, user.id, user.username, chat_id, "", StatType.ATTACK, time=message.date,
                                     textmode=True)
                    elif text == "‚ù§Ô∏è –¢–∞–Ω–∫–∏":
                        ctext = "hptop"
                        s = self.top(bot, user.id, user.username, chat_id, "", StatType.HP, time=message.date,
                                     textmode=True)
                    elif text == "ü§∏üèΩ‚Äç‚ôÇÔ∏è –õ–æ–≤–∫–∞—á–∏":
                        ctext = "agtop"
                        s = self.top(bot, user.id, user.username, chat_id, "", StatType.AGILITY, time=message.date,
                                     textmode=True)
                    elif text == "üî´ –°–Ω–∞–π–ø–µ—Ä—ã":
                        ctext = "acctop"
                        s = self.top(bot, user.id, user.username, chat_id, "", StatType.ACCURACY, time=message.date,
                                     textmode=True)
                    elif text == "üó£ –î–∏–ø–ª–æ–º–∞—Ç—ã":
                        ctext = "ortop"
                        s = self.top(bot, user.id, user.username, chat_id, "", StatType.ORATORY, time=message.date,
                                     textmode=True)
                    elif text == "üî™ –†–µ–π–¥–µ—Ä—ã":
                        ctext = "raidtop"
                        s = self.top(bot, user.id, user.username, chat_id, "", StatType.RAIDS, time=message.date,
                                     textmode=True)
                    elif text == "üìú –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫":
                        ctext = "players"
                        s = self.top(bot, user.id, user.username, chat_id, "", StatType.ALL, invisible=True,
                                     title="–ò–≥—Ä–æ–∫–∏", time=message.date, textmode=True)
                    if s != "":
                        markup = self.top_markup(user, ctext)
                        if markup != []:
                            bot.sendMessage(chat_id=chat_id, text=s, parse_mode='HTML', disable_web_page_preview=True,
                                            reply_markup=telega.InlineKeyboardMarkup(markup))
                        else:
                            bot.sendMessage(chat_id=chat_id, text=s, parse_mode='HTML', disable_web_page_preview=True,
                                            reply_markup=None)
                        return
                elif player.keyboard == KeyboardType.STATS:
                    if text == 'üì± –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
                        self.my_stat(bot, player, 5)
                        return
                    elif text == 'üîù –ü—Ä–∏—Ä–æ—Å—Ç':
                        self.my_change(bot, player, 4)
                        return
                    elif text == 'üì≤ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å':
                        markup = [telega.InlineKeyboardButton(text=str(i), callback_data="save " + str(i)) for i in
                                  range(1, 4)]
                        bot.sendMessage(chat_id=chat_id, text="–í—ã–±–µ—Ä–∏ —è—á–µ–π–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—èüíæ", parse_mode='HTML',
                                        disable_web_page_preview=True,
                                        reply_markup=telega.InlineKeyboardMarkup([markup]))
                        return
                bot.sendMessage(chat_id=chat_id, text="–≠—Ç–æ —á—Ç–æ-—Ç–æ —Å—Ç—Ä–∞–Ω–Ω–æ–µü§î\n–î—É–º–∞—Ç—å –æ–± —ç—Ç–æ–º —è –∫–æ–Ω–µ—á–Ω–æ –Ω–µ –±—É–¥—É üòù",
                                reply_markup=self.keyboards[player.keyboard])

    def top_markup(self, user, ctext, name=""):
        sq = set()
        plaeyer = self.users[user.id]
        if user.id in self.admins:
            sq = set(v for v in self.squadids.keys())
        elif user.id in self.masters.keys():
            sq = self.masters[user.id]
        if plaeyer.squad:
            sq.add(plaeyer.squad)
        markup = []
        if len(sq) > 0:
            t0 = "–í—Å–µ ‚öôÔ∏è–£–±–µ–∂–∏—â–µ 6"
            if name == "":
                t0 += " ‚úîÔ∏è"
            markup.append([telega.InlineKeyboardButton(text=t0, callback_data=ctext)])
            for q in sq:
                t0 = ""
                if name == q:
                    t0 = " ‚úîÔ∏è"
                markup.append(
                    [telega.InlineKeyboardButton(text=self.squadnames[q] + t0, callback_data=str(ctext + " " + q))])
        return markup

    def info(self, bot, player: Player):
        text = "–ü–µ—Ä–µ–¥ –≤–∞–º–∏ —Å—Ç–∞—Ç –±–æ—Ç 6 —É–±–µ–∂–∏—â–∞ <i>–∏ –æ–Ω –∫—Ä—É—Çüòé</i>\n–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –µ–≥–æ –∫–æ–º–∞–Ω–¥–∞–º–∏ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ" \
               " http://telegra.ph/StatBot-Redizajn-09-30\n–ù–æ –¥–ª—è –≤–∞—à–µ–≥–æ –∂–µ —É–¥–æ–±—Å—Ç–≤–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º\n" \
               "–ë–æ—Ç —Å–æ–∑–¥–∞–Ω –≤–æ –∏–º—è –±–ª–∞–≥–∞ –∏ –ø—Ä–æ—Ü–≤–µ—Ç–∞–Ω–∏—è 6 —É–±–µ–∂–∏—â–∞ –∏–≥—Ä–æ–∫–æ–º @ant_ant\n" \
               "–¢–∞–∫ —á—Ç–æ –µ—Å–ª–∏ –Ω–∞–π–¥–µ—Ç–µ –≤ –Ω–µ–º —Å–µ—Ä—å–µ–∑–Ω—ã–µ –±–∞–≥–∏ - –ø–∏—à–∏—Ç–µ –º–Ω–µ)\n–ï—Å–ª–∏ –µ—Å—Ç—å –∂–µ–ª–∞–Ω–∏–µ –ø–æ–º–æ—á—å - –º–æ–∂–µ—Ç–µ –ø–æ–¥–∫–∏–Ω—É—Ç—å" \
               " –¥–µ–Ω–µ–≥ (https://qiwi.me/67f1c4c8-705c-4bb3-a8d3-a35717f63858) –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É –±–æ—Ç–∞ –∏–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π –∏ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ –≥—Ä—É–ø–ø—É –∞–ª—å—Ñ–∞-—Ç–µ—Å—Ç–µ—Ä–æ–≤\n" \
               "\n<i>–ò–≥—Ä–∞–π—Ç–µ, –æ–±—â–∞–π—Ç–µ—Å—å, —Ä–∞–¥—É–π—Ç–µ—Å—å –∂–∏–∑–Ω–∏! –í–º–µ—Å—Ç–µ –º—ã —Å–∏–ª—å–Ω–µ–π—à–∞—è —Ñ—Ä–∞–∫—Ü–∏—è –≤ –∏–≥—Ä–µ!</i>\n\n<i>P.S.: –ë–æ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è. –î–∞–ª—å—à–µ –±—É–¥–µ—Ç –ª—É—á—à–µ</i>"
        bot.sendMessage(chat_id=player.chatid, text=text, parse_mode='HTML', disable_web_page_preview=True,
                        reply_markup=self.keyboards[player.keyboard])

    def guide(self, bot, player: Player, chat_id = None, private=False):
        text =  "<b>–ù–µ–ø–ª–æ—Ö–æ–π FAQ –ø–æ –∏–≥—Ä–µ:</b> http://telegra.ph/FAQ-02-13-3\n"\
                "<b>–ì–∞–π–¥ –ø–æ –ø–æ–¥–∑–µ–º–µ–ª—å—è–º: </b> http://telegra.ph/Podzemelya-02-13\n"
        if chat_id is None:
            chat_id = player.chatid
        if private:
            text += "<i>–ê–≤—Ç–æ—Ä –≥–∞–π–¥–æ–≤</i> @vladvertov"
            bot.sendMessage(chat_id=chat_id, text=text, parse_mode='HTML', disable_web_page_preview=True,
                            reply_markup=self.keyboards[player.keyboard])
        else:
            bot.sendMessage(chat_id=chat_id, text=text, parse_mode='HTML', disable_web_page_preview=False,
                        reply_markup=telega.ReplyKeyboardRemove())

    def statchange_markup(self, n, text, player: Player):
        buttons = ["1", "2", "3", "–ü—Ä–æ—à–ª—ã–π", "–¢–µ–∫—É—â–∏–π"]
        if text == "change":
            buttons = buttons[:-1]
        buttons[n] += " ‚úîÔ∏è"
        f = []
        for i in range(3):
            if player.stats[i] is not None:
                f.append(telega.InlineKeyboardButton(text=buttons[i], callback_data=text + " " + str(i)))
        l = []
        for i in range(3, len(buttons)):
            if player.stats[i] is not None:
                l.append(telega.InlineKeyboardButton(text=buttons[i], callback_data=text + " " + str(i)))
        res = []
        if f != []:
            res.append(f)
        if l != []:
            res.append(l)
        return res

    def my_stat(self, bot, player: Player, n, id=None):
        s = self.stat(bot, player.id, player.chatid, n, textmode=True)
        markup = self.statchange_markup(n - 1, "stat", player)
        if markup != []:
            markup = telega.InlineKeyboardMarkup(markup)
        else:
            markup = None
        if id is None:
            bot.sendMessage(chat_id=player.chatid, text=s, parse_mode='HTML', disable_web_page_preview=True,
                            reply_markup=markup)
        else:
            bot.editMessageText(chat_id=player.chatid, message_id=id, text=s, parse_mode='HTML',
                                disable_web_page_preview=True, reply_markup=markup)

    def my_change(self, bot, player: Player, n, id=None):
        s = self.change(bot, player.id, player.chatid, n, textmode=True)
        markup = self.statchange_markup(n - 1, "change", player)
        if markup != []:
            markup = telega.InlineKeyboardMarkup(markup)
        else:
            markup = None
        if id is None:
            bot.sendMessage(chat_id=player.chatid, text=s, parse_mode='HTML', disable_web_page_preview=True,
                            reply_markup=markup)
        else:
            bot.editMessageText(chat_id=player.chatid, message_id=id, text=s, parse_mode='HTML',
                                disable_web_page_preview=True, reply_markup=markup)

    def handle_callback(self, bot: telega.Bot, update: telega.Update):
        query = update.callback_query
        message = query.message
        chat_id = message.chat_id
        user = query.from_user
        if user.id in self.kick.keys() and datetime.datetime.now() - self.kick[user.id] < datetime.timedelta(
                milliseconds=500):
            bot.answer_callback_query(callback_query_id=query.id, text="Wow Wow Wow –ø–æ–ª–µ–≥—á–µ")
            return
        self.kick[user.id] = datetime.datetime.now()
        data = query.data
        if data == "":
            return
        conn = None
        cur = None
        try:
            conn = sql.connect(self.database)
            cur = conn.cursor()
        except sql.Error as e:
            print("Sql error occurred:", e.args[0])
        text = data.split()[0]
        name = ""
        try:
            name = data.split()[1]
        except:
            pass
        player = self.users[user.id]
        s = ""
        if text == "top":
            s = self.top(bot, user.id, user.username, chat_id, data, StatType.ALL, time=message.date, textmode=True)
        elif text == "rushtop":
            s = self.top(bot, user.id, user.username, chat_id, data, StatType.ATTACK, time=message.date, textmode=True)
        elif text == "hptop":
            s = self.top(bot, user.id, user.username, chat_id, data, StatType.HP, time=message.date, textmode=True)
        elif text == "agtop":
            s = self.top(bot, user.id, user.username, chat_id, data, StatType.AGILITY, time=message.date, textmode=True)
        elif text == "acctop":
            s = self.top(bot, user.id, user.username, chat_id, data, StatType.ACCURACY, time=message.date,
                         textmode=True)
        elif text == "ortop":
            s = self.top(bot, user.id, user.username, chat_id, data, StatType.ORATORY, time=message.date, textmode=True)
        elif text == "raidtop":
            s = self.top(bot, user.id, user.username, chat_id, data, StatType.RAIDS, time=message.date, textmode=True)
        elif text == "players":
            s = self.top(bot, user.id, user.username, chat_id, data, StatType.ALL, invisible=True, title="–ò–≥—Ä–æ–∫–∏",
                         time=message.date, textmode=True)
        elif text == "stat":
            self.my_stat(bot, self.users[user.id], int(name) + 1, message.message_id)
        elif text == "change":
            self.my_change(bot, self.users[user.id], int(name) + 1, message.message_id)
        elif text == "save":
            n = int(name)
            if n < 1 or n > 3:
                bot.answer_callback_query(callback_query_id=query.id, text="—á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫")
                return
            ps = player.get_stats(4)
            player.set_stats(cur, ps, n - 1)
            conn.commit()
            s = "–¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —è—á–µ–π–∫—É ‚Ññ" + str(n)
        elif text == "online":
            if not self.pinonline.add(player, chat_id):
                self.pinonline.delete(player)
            bot.answer_callback_query(callback_query_id=query.id, text="Done")
            return
        elif text == "offline":
            self.pinonline.close()
            self.pinonline = None
            bot.answer_callback_query(callback_query_id=query.id, text="Done")
            return
        elif text == "onkm":
            if not self.pinkm.add(player, chat_id, name):
                self.pinkm.delete(player)
            bot.answer_callback_query(callback_query_id=query.id, text="Done")
            return
        elif text == "offkm":
            self.pinkm.close()
            self.pinkm = None
            bot.answer_callback_query(callback_query_id=query.id, text="Done")
            return
        if s != "":
            markup = []
            if "top" in text or "players" in text:
                markup = self.top_markup(user, text, name)
            if markup != []:
                bot.editMessageText(chat_id=chat_id, message_id=message.message_id, text=s, parse_mode='HTML',
                                    disable_web_page_preview=True,
                                    reply_markup=telega.InlineKeyboardMarkup(markup))
            else:
                bot.editMessageText(chat_id=chat_id, message_id=message.message_id, text=s, parse_mode='HTML',
                                    disable_web_page_preview=True, reply_markup=None)
        bot.answer_callback_query(callback_query_id=query.id, text="–ì–æ—Ç–æ–≤–æ")


if __name__ == "__main__":
    f = open("bot.txt")
    db, tk, name = [s.strip() for s in f.readline().split()]
    bot = Bot(db, tk, name)
    bot.start()
    print("admins:", bot.admins)
    print("squadnames:", bot.squadnames.keys())
    print("users", bot.usersbyname.keys())
